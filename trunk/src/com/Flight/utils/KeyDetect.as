package {	import flash.display.MovieClip;	import flash.display.Stage;	import flash.events.*;		public class KeyDetect extends MovieClip	{			// the following will hold the keycodes for control		private var left:int;		private var right:int;		private var up:int;		private var down:int;				private var keyPressedUp:Boolean;		private var keyPressedLeft:Boolean;		private var keyPressedDown:Boolean;		private var keyPressedRight:Boolean;				private var lastKeyPressedArray:Array;						public function KeyDetect(leftButton:int, rightButton:int, 							   upButton:int, downButton:int, stageRef:Stage):void		{			left = leftButton;			right = rightButton;			up = upButton;			down = downButton;			rock = rockButton;			paper = paperButton;			scissors = scissorsButton;			shield = shieldButton;						lastKeyPressedArray = new Array();						gravity = grav;			restitution = restit;			friction = frict;			speed = spe;			mass = wei;			strength = stren;			normalForce = 0;						percentage = 0;			isBeingHit = false;						rockAttack = false;			paperAttack = false;			scissorsAttack = false;						shieldUp = false;						isAirborne = false;						stageRef.addEventListener(KeyboardEvent.KEY_DOWN, keyDownListener);			stageRef.addEventListener(KeyboardEvent.KEY_UP, keyUpListener);					}				public function keyDownListener(e:KeyboardEvent):void		{			switch (e.keyCode)			{				case getUp():					keyPressedUp = true;					lastKeyPressedArray.push(getUp());					break;				case getLeft():					keyPressedLeft = true;					lastKeyPressedArray.push(getLeft());					break;				case getDown(): 					keyPressedDown = true;					lastKeyPressedArray.push(getDown());					break;				case getRight():					keyPressedRight = true;					lastKeyPressedArray.push(getRight());					break;				case getRock():					keyPressedRock = true;					lastKeyPressedArray.push(getRock());					break;				case getPaper():					keyPressedPaper = true;					lastKeyPressedArray.push(getPaper());					break;				case getScissors():					keyPressedScissors = true;					lastKeyPressedArray.push(getScissors());					break;				case getShield():					keyPressedShield = true;					lastKeyPressedArray.push(getShield());			}			//trace(e.keyCode);		}				public function keyUpListener(e:KeyboardEvent):void		{			//trace(e.keyCode);			switch (e.keyCode)			{				case getUp(): 					keyPressedUp = false;					break;				case getLeft():					keyPressedLeft = false;					break;				case getDown():					keyPressedDown = false;					break;				case getRight():					keyPressedRight = false;					break;				case getRock():					keyPressedRock = false;					break;				case getPaper():					keyPressedPaper = false;					break;				case getScissors():					keyPressedScissors = false;					break;				case getShield():					keyPressedShield = false;					break;			}		}				// Accessors!!		public function getLeft():int		{			return left;		}		public function getRight():int		{			return right;		}				public function getUp():int		{			return up;		}		public function getDown():int		{			return down;		}		public function getRock():int		{			return rock;		}		public function getPaper():int		{			return paper;		}		public function getScissors():int		{			return scissors;		}		public function getShield():int		{			return shield;		}		public function getKeysPressed():Array		{			var keyArray = new Array(keyPressedUp, keyPressedDown, keyPressedLeft, 									 keyPressedRight, keyPressedRock, keyPressedPaper, 									 keyPressedScissors, keyPressedShield);			return keyArray;		}		public function getSpeed():Number		{			return speed;		}		public function getMass():Number		{			return mass;		}		public function getGravity():Number		{			return gravity;		}		public function getRestitution():Number		{			return restitution;		}		public function getFriction():Number		{			return friction;		}		public function getAirborneStatus():Boolean		{			return isAirborne;		}		public function getAccelerationCalc():Number		{			return gravity*10 / (mass / speed);		}		public function getStrength():Number		{			return strength;		}		public function getNormalForce()		{			return normalForce;		}		public function getLastKeyPressedArray():Array		{			return lastKeyPressedArray;		}		public function getPercentage():Number		{			return percentage;		}		public function getIsBeingHit():Boolean		{			return isBeingHit;		}		public function getIsP1():Boolean		{			return isP1;		}		public function getIsP2():Boolean		{			return isP2;		}		public function getRockAttack():Boolean		{			return rockAttack;		}		public function getPaperAttack():Boolean		{			return paperAttack;		}				public function getScissorsAttack():Boolean		{			return scissorsAttack;		}		public function getShieldUp():Boolean		{			return shieldUp;		}				/// Mutators!		public function setGravity(g:Number):void		{			gravity = g;		}		public function setRestitution(r:Number):void		{			restitution = r;		}		public function setFriction(f:Number):void		{			friction = f;		}		public function setSpeed(s:Number)		{			speed = s;		}		public function setMass(w:Number):void		{			mass = w;		}		public function setAirborneStatus(a:Boolean):void		{			isAirborne = a;		}		public function setStrength(s:Number):void		{			strength = s;		}		public function setNormalForce(nF:Number)		{			normalForce = nF;		}		public function setPercentage(p:Number)		{			percentage = p;		}		public function setIsBeingHit(b:Boolean)		{			isBeingHit = b;		}		public function setIsP1(b:Boolean)		{			isP1 = b;		}		public function setIsP2(b:Boolean)		{			isP2 = b;		}			public function setRockAttack(b:Boolean)		{			rockAttack = b;		}			public function setPaperAttack(b:Boolean)		{			paperAttack = b;		}			public function setScissorsAttack(b:Boolean)		{			scissorsAttack = b;		}			public function setShieldUp(b:Boolean)		{			shieldUp = b;		}				public function changeControlScheme(leftButton:int, rightButton:int, 							   upButton:int, downButton:int, rockButton:int, 							   paperButton:int, scissorsButton:int, shieldButton:int):void		{					}			}	}